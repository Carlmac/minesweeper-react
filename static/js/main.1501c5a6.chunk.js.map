{"version":3,"sources":["types/index.ts","components/NumberDisplay/index.tsx","utils/index.ts","constants/index.ts","components/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","rightCell","bottomRightCell","MAX_ROWS","bottomCell","bottomLeftCell","leftCell","generateCells","row","push","col","None","state","Open","bombsPlaced","randomRow","floor","random","randomCol","currentCell","Bomb","rowIndex","colIndex","numberOfBombs","openMultipleCells","Visible","Flagged","newCells","slice","Button","red","onClick","onContext","onContextMenu","role","App","useState","setCells","Smile","face","setFace","time","setTime","live","setLive","bombCounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","handleMouseDown","Oh","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","Lost","Won","handleCellClick","isABomb","includes","showAllBombs","safeOpenCellsExists","map","cell","handleCellContext","e","preventDefault","currentCells","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1501c5a6.chunk.js","sourcesContent":["export enum CellValue {\r\n  None,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  Open,\r\n  Visible,\r\n  Flagged,\r\n}\r\n\r\nexport type Cell = { value: CellValue; state: CellState; red?: boolean };\r\n\r\nexport enum Face {\r\n  Smile = \"üòÄ\",\r\n  Oh = \"üò≤\",\r\n  Lost = \"üôÅ\",\r\n  Won = \"üòé\",\r\n}\r\n","import React from \"react\";\r\nimport \"./NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <span>\r\n        {value < 0\r\n          ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n          : value.toString().padStart(3, \"0\")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import { MAX_COLS, MAX_ROWS, NUMBER_OF_BOMBS } from \"../constants\";\r\nimport { Cell, CellState, CellValue } from \"../types\";\r\n// import React from \"react\";\r\n\r\n// Ëé∑ÂèñÂë®Âõ¥ 8 ‰∏™Ê†ºÂ≠êÁöÑÂáΩÊï∞\r\nconst grabAllAdjacentCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  leftCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    rightCell,\r\n    bottomRightCell,\r\n    bottomCell,\r\n    bottomLeftCell,\r\n    leftCell,\r\n  };\r\n};\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  // ÁîüÊàê 9 x 9 ‰∏™Ê†ºÂ≠ê\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.None,\r\n        // state: CellState.Visible, // to.do ÊµãËØïÂÆåÂêéÊîπÂõû open\r\n        state: CellState.Open,\r\n      });\r\n    }\r\n  }\r\n\r\n  // ÈöèÊú∫ÁîüÊàê 10 ‰∏™Âú∞Èõ∑\r\n  let bombsPlaced = 0;\r\n  while (bombsPlaced < NUMBER_OF_BOMBS) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n\r\n    let currentCell = cells[randomRow][randomCol];\r\n\r\n    if (currentCell.value !== CellValue.Bomb) {\r\n      currentCell.value = CellValue.Bomb;\r\n      bombsPlaced += 1;\r\n    }\r\n  }\r\n\r\n  // ÁªôÊ≤°Âú∞Èõ∑ÁöÑÊ†ºÂ≠êËÆ°ÁÆóÂë®Âõ¥ÁöÑÂú∞Èõ∑Êï∞\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n\r\n      if (currentCell.value === CellValue.Bomb) {\r\n        continue;\r\n      }\r\n\r\n      let numberOfBombs = 0;\r\n\r\n      // Ëé∑ÂèñÂΩìÂâçÊ†ºÂ≠êÁöÑÂë®Âõ¥8‰∏™Ê†ºÂ≠ê\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        rightCell,\r\n        bottomRightCell,\r\n        bottomCell,\r\n        bottomLeftCell,\r\n        leftCell,\r\n      } = grabAllAdjacentCells(cells, rowIndex, colIndex);\r\n\r\n      // Ê£ÄÊü•ÂÆÉ‰ª¨ÊúâÊ≤°ÊúâÂú∞Èõ∑\r\n      if (topLeftCell && topLeftCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (topCell && topCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (topRightCell && topRightCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (rightCell && rightCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (bottomRightCell && bottomRightCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (bottomCell && bottomCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (bottomLeftCell && bottomLeftCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (leftCell && leftCell.value === CellValue.Bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  const currentCell = cells[rowParam][colParam];\r\n\r\n  if (\r\n    currentCell.state === CellState.Visible ||\r\n    currentCell.state === CellState.Flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n\r\n  let newCells = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.Visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    rightCell,\r\n    bottomRightCell,\r\n    bottomCell,\r\n    bottomLeftCell,\r\n    leftCell,\r\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell &&\r\n    topLeftCell.state === CellState.Open &&\r\n    topLeftCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (topLeftCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam - 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topCell &&\r\n    topCell.state === CellState.Open &&\r\n    topCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (topCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam);\r\n    } else {\r\n      newCells[rowParam - 1][colParam].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topRightCell &&\r\n    topRightCell.state === CellState.Open &&\r\n    topRightCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (topRightCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam + 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    rightCell &&\r\n    rightCell.state === CellState.Open &&\r\n    rightCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (rightCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam + 1);\r\n    } else {\r\n      newCells[rowParam][colParam + 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomRightCell &&\r\n    bottomRightCell.state === CellState.Open &&\r\n    bottomRightCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (bottomRightCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam + 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomCell &&\r\n    bottomCell.state === CellState.Open &&\r\n    bottomCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (bottomCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam);\r\n    } else {\r\n      newCells[rowParam + 1][colParam].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell &&\r\n    bottomLeftCell.state === CellState.Open &&\r\n    bottomLeftCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (bottomLeftCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam - 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    leftCell &&\r\n    leftCell.state === CellState.Open &&\r\n    leftCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (leftCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam - 1);\r\n    } else {\r\n      newCells[rowParam][colParam - 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NUMBER_OF_BOMBS = 10;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\nimport { CellState, CellValue } from \"../../types\";\r\n\r\ninterface ButtonProps {\r\n  state: CellState;\r\n  value: CellValue;\r\n  red?: boolean;\r\n  row: number;\r\n  col: number;\r\n\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  state,\r\n  value,\r\n  red,\r\n  row,\r\n  col,\r\n  onClick,\r\n  onContext,\r\n}) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.Visible) {\r\n      if (value === CellValue.Bomb) {\r\n        return <span role=\"img\">üí£</span>;\r\n      } else if (value === CellValue.None) {\r\n        return null;\r\n      }\r\n      return <span>{value}</span>;\r\n    } else if (state === CellState.Flagged) {\r\n      return <span role=\"img\">üö©</span>;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Button ${\r\n        state === CellState.Visible ? \"visible\" : \"\"\r\n      } value-${value} ${red ? \"red\" : \"\"}`}\r\n      onClick={onClick(row, col)}\r\n      onContextMenu={onContext(row, col)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport { generateCells, openMultipleCells } from \"../../utils\";\r\nimport Button from \"../Button\";\r\nimport { Cell, CellState, CellValue, Face } from \"../../types\";\r\nimport { MAX_COLS, MAX_ROWS, NUMBER_OF_BOMBS } from \"../../constants\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.Smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState<number>(NUMBER_OF_BOMBS);\r\n  const [hasLost, setHasLost] = useState<boolean>(false);\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const handleMouseDown = () => {\r\n      if (hasWon || hasLost) {\r\n        return;\r\n      }\r\n      setFace(Face.Oh);\r\n    };\r\n    const handleMouseUp = () => {\r\n      if (hasWon || hasLost) {\r\n        return;\r\n      }\r\n      setFace(Face.Smile);\r\n    };\r\n    window.addEventListener(\"mousedown\", handleMouseDown);\r\n    window.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleMouseDown);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, [hasWon, hasLost]);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timer = window.setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n      return () => {\r\n        window.clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time]);\r\n\r\n  useEffect(() => {\r\n    if (hasLost) {\r\n      setLive(false);\r\n      setFace(Face.Lost);\r\n    }\r\n  }, [hasLost]);\r\n\r\n  useEffect(() => {\r\n    if (hasWon) {\r\n      setLive(false);\r\n      setFace(Face.Won);\r\n    }\r\n  }, [hasWon]);\r\n\r\n  // Â∑¶ÈîÆÁÇπÂáªÊ†ºÂ≠êÊó∂ÁöÑË°å‰∏∫\r\n  const handleCellClick = (rowParam: number, colParam: number) => {\r\n    return () => {\r\n      // Â¶ÇÊûúÊ∏∏ÊàèÂ∑≤ÁªèÁªìÊùüÔºå‰∏çÂìçÂ∫îÁÇπÂáª\r\n      if (hasWon || hasLost) {\r\n        return;\r\n      }\r\n\r\n      let newCells = cells.slice();\r\n\r\n      // Ê£ÄÊü•ÊåâÁöÑÁ¨¨‰∏Ä‰∏™Ê†ºÂ≠êÊòØ‰∏çÊòØÁÇ∏ÂºπÔºåÊòØÁöÑËØùÈáçÊñ∞ÂàõÂª∫Ê†ºÂ≠ê\r\n      if (!live) {\r\n        let isABomb = newCells[rowParam][colParam].value === CellValue.Bomb;\r\n        while (isABomb) {\r\n          newCells = generateCells();\r\n          if (newCells[rowParam][colParam].value !== CellValue.Bomb) {\r\n            isABomb = false;\r\n            break;\r\n          }\r\n        }\r\n        setLive(true);\r\n      }\r\n\r\n      const currentCell = newCells[rowParam][colParam];\r\n\r\n      if ([CellState.Flagged, CellState.Visible].includes(currentCell.state)) {\r\n        return;\r\n      }\r\n\r\n      if (currentCell.state === CellState.Flagged) {\r\n        return;\r\n      }\r\n\r\n      if (currentCell.value === CellValue.Bomb) {\r\n        // ÁàÜÁÇ∏\r\n        setHasLost(true);\r\n        newCells[rowParam][colParam].red = true;\r\n        newCells = showAllBombs();\r\n        setCells(newCells);\r\n        return;\r\n      } else if (currentCell.value === CellValue.None) {\r\n        newCells = openMultipleCells(newCells, rowParam, colParam);\r\n      } else {\r\n        newCells[rowParam][colParam].state = CellState.Visible;\r\n      }\r\n\r\n      let safeOpenCellsExists = false;\r\n      for (let row = 0; row < MAX_ROWS; row++) {\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n          const currentCell = newCells[row][col];\r\n\r\n          if (\r\n            currentCell.value !== CellValue.Bomb &&\r\n            currentCell.state === CellState.Open\r\n          ) {\r\n            safeOpenCellsExists = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!safeOpenCellsExists) {\r\n        newCells = newCells.map((row) =>\r\n          row.map((cell) => {\r\n            if (cell.value === CellValue.Bomb) {\r\n              return {\r\n                ...cell,\r\n                state: CellState.Flagged,\r\n              };\r\n            }\r\n            return cell;\r\n          })\r\n        );\r\n        setHasWon(true);\r\n      }\r\n\r\n      setCells(newCells);\r\n    };\r\n  };\r\n\r\n  // Âè≥ÈîÆÁÇπÂáªÊ†ºÂ≠êÊó∂ÁöÑË°å‰∏∫\r\n  const handleCellContext = (rowParam: number, colParam: number) => {\r\n    return (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n      e.preventDefault();\r\n\r\n      if (!live) {\r\n        return;\r\n      }\r\n\r\n      const currentCell = cells[rowParam][colParam];\r\n      const currentCells = cells.slice();\r\n\r\n      if (currentCell.state === CellState.Visible) {\r\n        return;\r\n      } else if (currentCell.state === CellState.Open) {\r\n        currentCells[rowParam][colParam].state = CellState.Flagged;\r\n        setCells(currentCells);\r\n        setBombCounter(bombCounter - 1);\r\n      } else if (currentCell.state === CellState.Flagged) {\r\n        currentCells[rowParam][colParam].state = CellState.Open;\r\n        setCells(currentCells);\r\n        setBombCounter(bombCounter + 1);\r\n      }\r\n    };\r\n  };\r\n\r\n  // ÁÇπÂáªÁ¨ëËÑ∏Êó∂ÁöÑË°å‰∏∫\r\n  const handleFaceClick = () => {\r\n    setBombCounter(NUMBER_OF_BOMBS);\r\n    setFace(Face.Smile);\r\n    setTime(0);\r\n    setLive(false);\r\n    setHasLost(false);\r\n    setHasWon(false);\r\n    setCells(generateCells());\r\n  };\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, colIndex) => (\r\n        <Button\r\n          key={`${rowIndex}-${colIndex}`}\r\n          state={cell.state}\r\n          value={cell.value}\r\n          red={cell.red}\r\n          row={rowIndex}\r\n          col={colIndex}\r\n          onClick={handleCellClick}\r\n          onContext={handleCellContext}\r\n        />\r\n      ))\r\n    );\r\n  };\r\n\r\n  // ÊòæÁ§∫ÊâÄÊúâÁÇ∏Âºπ\r\n  const showAllBombs = () => {\r\n    const currentCells = cells.slice();\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.Bomb) {\r\n          return {\r\n            ...cell,\r\n            state: CellState.Visible,\r\n          };\r\n        }\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"Face\" onClick={handleFaceClick}>\r\n          <span role=\"img\">{face}</span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./components/App/index\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}